{"version":3,"file":"component---gatsby-theme-academic-src-pages-research-index-jsx-1322e761a5b3e4ffd048.js","mappings":"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","sources":["webpack://example/../gatsby-theme-academic/src/pages/research/index.jsx"],"sourcesContent":["import { Button, FlexboxGrid, Col, Stack } from 'rsuite';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useState } from 'react';\nimport _ from 'lodash';\n\nimport SEO from '../../components/Seo';\nimport ResearchCard from '../../components/ResearchCard';\n\nconst Research = ({ data }) => {\n  const [selectedYears, setSelectedYears] = useState(new Set());\n  const [selectedTags, setSelectedTags] = useState(new Set());\n\n  const tags = data.allTag ? data.allTag.edges : [];\n  const tagsMap = _.mapValues(_.keyBy(tags, (tag) => tag.node.name), 'node');\n  const researchEdges = data.allMdx.edges;\n\n  const parseYear = (value) => {\n    if (value === null || value === undefined) {\n      return 'Unknown';\n    }\n\n    if (typeof value === 'number') {\n      return value.toString();\n    }\n\n    const numericFromString = Number(value);\n    if (!Number.isNaN(numericFromString) && value.toString().length <= 4) {\n      return numericFromString.toString();\n    }\n\n    const parsedDate = new Date(value);\n    if (!Number.isNaN(parsedDate.getTime())) {\n      return parsedDate.getFullYear().toString();\n    }\n\n    return 'Unknown';\n  };\n\n  const getComparableDate = (value) => {\n    if (value === null || value === undefined) {\n      return new Date(0);\n    }\n\n    if (typeof value === 'number') {\n      return new Date(`${value}-01-01T00:00:00Z`);\n    }\n\n    const parsedDate = new Date(value);\n    if (!Number.isNaN(parsedDate.getTime())) {\n      return parsedDate;\n    }\n\n    const numericFromString = Number(value);\n    if (!Number.isNaN(numericFromString)) {\n      return new Date(`${numericFromString}-01-01T00:00:00Z`);\n    }\n\n    return new Date(0);\n  };\n\n  const availableYears = useMemo(() => {\n    const yearSet = new Set();\n    researchEdges.forEach((edge) => {\n      yearSet.add(parseYear(edge.node.frontmatter.date));\n    });\n    const years = Array.from(yearSet).filter((year) => year !== 'Unknown');\n    years.sort((a, b) => Number(b) - Number(a));\n    if (yearSet.has('Unknown')) {\n      years.push('Unknown');\n    }\n    return years;\n  }, [researchEdges]);\n\n  const availableTags = useMemo(() => (\n    tags.map((tag) => tag.node.name)\n  ), [tags]);\n\n  const filteredResearch = useMemo(() => {\n    const yearFilterActive = selectedYears.size > 0;\n    const tagFilterActive = selectedTags.size > 0;\n\n    return researchEdges\n      .filter((edge) => {\n        const { frontmatter } = edge.node;\n        const year = parseYear(frontmatter.date);\n        const entryTags = frontmatter.tags || [];\n\n        if (yearFilterActive && !selectedYears.has(year)) {\n          return false;\n        }\n\n        if (tagFilterActive) {\n          for (const tag of selectedTags) {\n            if (!entryTags.includes(tag)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      })\n      .sort((a, b) => getComparableDate(b.node.frontmatter.date) - getComparableDate(a.node.frontmatter.date));\n  }, [researchEdges, selectedYears, selectedTags]);\n\n  const groupedResearch = useMemo(() => {\n    const groups = filteredResearch.reduce((acc, edge) => {\n      const year = parseYear(edge.node.frontmatter.date);\n      if (!acc[year]) {\n        acc[year] = [];\n      }\n      acc[year].push(edge);\n      return acc;\n    }, {});\n\n    const sortedKeys = Object.keys(groups).sort((a, b) => {\n      if (a === 'Unknown') return 1;\n      if (b === 'Unknown') return -1;\n      return Number(b) - Number(a);\n    });\n\n    return { groups, sortedKeys };\n  }, [filteredResearch]);\n\n  const handleYearToggle = (year) => {\n    if (year === 'All') {\n      setSelectedYears(new Set());\n      return;\n    }\n\n    setSelectedYears((prev) => {\n      const next = new Set(prev);\n      if (next.has(year)) {\n        next.delete(year);\n      } else {\n        next.add(year);\n      }\n      return next;\n    });\n  };\n\n  const handleTagToggle = (tag) => {\n    if (tag === 'All') {\n      setSelectedTags(new Set());\n      return;\n    }\n\n    setSelectedTags((prev) => {\n      const next = new Set(prev);\n      if (next.has(tag)) {\n        next.delete(tag);\n      } else {\n        next.add(tag);\n      }\n      return next;\n    });\n  };\n\n  const renderFilterRow = (label, options, selectedSet, onToggle, includeAll = true) => (\n    <div style={{ marginBottom: '1rem' }}>\n      <Stack spacing={12} alignItems=\"center\" wrap>\n        <strong style={{ minWidth: '3.5rem' }}>{label}</strong>\n        <Stack spacing={8} wrap>\n          {includeAll && (\n            <Button\n              appearance={selectedSet.size === 0 ? 'primary' : 'ghost'}\n              size=\"sm\"\n              onClick={() => onToggle('All')}\n            >\n              All\n            </Button>\n          )}\n          {options.map((option) => (\n            <Button\n              key={option}\n              appearance={selectedSet.has(option) ? 'primary' : 'ghost'}\n              size=\"sm\"\n              onClick={() => onToggle(option)}\n            >\n              {option}\n            </Button>\n          ))}\n        </Stack>\n      </Stack>\n    </div>\n  );\n\n  return (\n    <>\n      <SEO\n        title=\"Research\"\n        description=\"My research focuses on generative world modeling, data-centric AI, and efficient machine learning. I explore how AI systems can simulate complex environments, curate high-quality datasets, and operate effectively in real-time scenarios with long-sequence modeling capabilities.\"\n        path=\"research\"\n      />\n      <div className=\"marginTopTitle\">\n        <h1 className=\"titleSeparate\">Research</h1>\n\n        <div style={{ marginBottom: '2rem' }}>\n          {renderFilterRow('Year', availableYears, selectedYears, handleYearToggle)}\n          {renderFilterRow('Tag', availableTags, selectedTags, handleTagToggle)}\n        </div>\n\n        {groupedResearch.sortedKeys.length === 0 ? (\n          <div style={{\n            textAlign: 'center',\n            marginTop: '3rem',\n            padding: '2rem',\n            borderRadius: 'var(--app-radius, 12px)',\n            border: '1px solid var(--app-border, #e0e0e0)',\n            background: 'var(--app-panel-bg, #f9f9f9)',\n            color: 'var(--app-text-secondary, #777)',\n          }}>\n            No research entries match the selected filters yet. Try adjusting the year or tag filters to explore more work.\n          </div>\n        ) : (\n          <FlexboxGrid>\n            {groupedResearch.sortedKeys.map((key) => (\n              <FlexboxGrid.Item key={key} colspan={24} style={{ marginBottom: '3rem' }}>\n                <h2 style={{\n                  fontSize: '1.5rem',\n                  marginBottom: '1.5rem',\n                  borderBottom: '2px solid #e0e0e0',\n                  paddingBottom: '0.5rem',\n                }}>\n                  {key}\n                </h2>\n                <FlexboxGrid>\n                  {groupedResearch.groups[key].map((edge, index) => (\n                    <FlexboxGrid.Item\n                      as={Col}\n                      key={`${key}-${index}`}\n                      xs={24}\n                      sm={24}\n                      md={24}\n                      lg={24}\n                      style={{ marginBottom: '1rem' }}\n                    >\n                      <ResearchCard data={edge} tagsMap={tagsMap} enableHighlight />\n                    </FlexboxGrid.Item>\n                  ))}\n                </FlexboxGrid>\n              </FlexboxGrid.Item>\n            ))}\n          </FlexboxGrid>\n        )}\n      </div>\n    </>\n  );\n};\n\nResearch.propTypes = {\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport const query = graphql`\n  {\n    allTag(\n      sort: { fields: [count], order: DESC },\n      filter: { research: { eq: true } }\n    ) {\n      edges {\n        node {\n          name\n          color\n          path\n        }\n      }\n    }\n    allMdx(\n      filter: { \n        fileAbsolutePath: { regex: \"/research\\/.*\\/index\\\\.mdx?$/\" }\n      }\n      sort: { fields: [frontmatter___priority, frontmatter___title], order: ASC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 320, maxHeight: 180, fit: CONTAIN, background: \"rgba(0,0,0,0)\") {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n                large: fluid(maxWidth: 1920, maxHeight: 1080, quality: 95, fit: CONTAIN, background: \"rgba(0,0,0,0)\") {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n            date\n            venue\n            authors\n            path\n            title\n            tags\n            excerpt\n            priority\n            highlight\n            links {\n              name\n              url\n            }\n          }\n          fileAbsolutePath\n        }\n      }\n    }\n  }\n`;\n\nexport default Research;\n"],"names":["data","useState","Set","selectedYears","setSelectedYears","selectedTags","setSelectedTags","tags","allTag","edges","tagsMap","tag","node","name","researchEdges","allMdx","parseYear","value","toString","numericFromString","Number","isNaN","length","parsedDate","Date","getTime","getFullYear","getComparableDate","availableYears","useMemo","yearSet","forEach","edge","add","frontmatter","date","years","Array","from","filter","year","sort","a","b","has","push","availableTags","map","filteredResearch","yearFilterActive","size","tagFilterActive","entryTags","includes","groupedResearch","groups","reduce","acc","sortedKeys","Object","keys","renderFilterRow","label","options","selectedSet","onToggle","includeAll","style","marginBottom","spacing","alignItems","wrap","minWidth","appearance","onClick","option","key","title","description","path","className","prev","next","delete","textAlign","marginTop","padding","borderRadius","border","background","color","colspan","fontSize","borderBottom","paddingBottom","index","as","Col","xs","sm","md","lg","enableHighlight"],"sourceRoot":""}