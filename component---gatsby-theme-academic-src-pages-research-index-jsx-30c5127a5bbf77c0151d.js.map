{"version":3,"file":"component---gatsby-theme-academic-src-pages-research-index-jsx-30c5127a5bbf77c0151d.js","mappings":"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","sources":["webpack://example/../node_modules/rsuite/esm/ButtonGroup/ButtonGroup.js","webpack://example/../node_modules/rsuite/esm/ButtonGroup/index.js","webpack://example/../gatsby-theme-academic/src/pages/research/index.jsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useMemo } from 'react';\nimport { useClassNames } from '../utils';\nimport ButtonGroupContext from './ButtonGroupContext';\nvar ButtonGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'btn-group' : _props$classPrefix,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'group' : _props$role,\n      className = props.className,\n      children = props.children,\n      block = props.block,\n      vertical = props.vertical,\n      justified = props.justified,\n      size = props.size,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"classPrefix\", \"role\", \"className\", \"children\", \"block\", \"vertical\", \"justified\", \"size\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge;\n\n  var classes = merge(className, withClassPrefix(size, {\n    block: block,\n    vertical: vertical,\n    justified: justified\n  }));\n  var contextValue = useMemo(function () {\n    return {\n      size: size\n    };\n  }, [size]);\n  return /*#__PURE__*/React.createElement(ButtonGroupContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    role: role,\n    ref: ref,\n    className: classes\n  }), children));\n});\nButtonGroup.displayName = 'ButtonGroup';\nexport default ButtonGroup;","import ButtonGroup from './ButtonGroup';\nimport ButtonGroupContext from './ButtonGroupContext';\nexport { ButtonGroupContext };\nexport default ButtonGroup;","import { Container, Button, ButtonGroup, FlexboxGrid, Col } from 'rsuite';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React, { useState, useMemo } from 'react';\nimport _ from 'lodash';\n\nimport Footer from '../../components/PageLayout/Footer';\nimport Header from '../../components/PageLayout/Header';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport Panel from '../../components/Panel';\nimport SEO from '../../components/Seo';\nimport ResearchCard from '../../components/ResearchCard';\n\nconst Research = ({ data }) => {\n  const [viewMode, setViewMode] = useState('date'); // 'date' or 'tag'\n  \n  // Define the specific tags to display in tag view (in preferred order)\n  const displayTags = [\n    'World Model',\n    'LLM Agent',\n    'AI Interpretability',\n    'Benchmark',\n  ];\n  \n  // Create tagsMap like Panel component does\n  const tags = data.allTag ? data.allTag.edges : [];\n  const tagsMap = _.mapValues(_.keyBy(tags, (tag) => tag.node.name), 'node');\n  \n  // Process research data\n  const researchData = useMemo(() => {\n    const research = data.allMdx.edges; // Keep the full edge structure\n    \n    if (viewMode === 'date') {\n      // Group by year\n      const groupedByYear = research.reduce((acc, edge) => {\n        const year = new Date(edge.node.frontmatter.date).getFullYear();\n        if (!acc[year]) {\n          acc[year] = [];\n        }\n        acc[year].push(edge);\n        return acc;\n      }, {});\n      \n      // Sort by year (descending) and within each year by date (descending)\n      const sortedYears = Object.keys(groupedByYear)\n        .sort((a, b) => parseInt(b) - parseInt(a));\n      \n      sortedYears.forEach(year => {\n        groupedByYear[year].sort((a, b) => \n          new Date(b.node.frontmatter.date) - new Date(a.node.frontmatter.date)\n        );\n      });\n      \n      return { type: 'date', groups: groupedByYear, sortedKeys: sortedYears };\n    } else {\n      // Group by tags - only include specified display tags\n      const groupedByTag = research.reduce((acc, edge) => {\n        const tags = edge.node.frontmatter.tags || [];\n        tags.forEach(tag => {\n          // Only include tags that are in our displayTags list\n          if (displayTags.includes(tag)) {\n            if (!acc[tag]) {\n              acc[tag] = [];\n            }\n            acc[tag].push(edge);\n          }\n        });\n        return acc;\n      }, {});\n      \n      // Use displayTags order instead of alphabetical, but only include tags that have research\n      const sortedTags = displayTags.filter(tag => groupedByTag[tag] && groupedByTag[tag].length > 0);\n      \n      sortedTags.forEach(tag => {\n        groupedByTag[tag].sort((a, b) => \n          new Date(b.node.frontmatter.date) - new Date(a.node.frontmatter.date)\n        );\n      });\n      \n      return { type: 'tag', groups: groupedByTag, sortedKeys: sortedTags };\n    }\n  }, [data.allMdx.edges, viewMode]);\n\n  return (\n    <>\n      <SEO\n        title=\"Research\"\n        description=\"My research focuses on generative world modeling, data-centric AI, and efficient machine learning. I explore how AI systems can simulate complex environments, curate high-quality datasets, and operate effectively in real-time scenarios with long-sequence modeling capabilities.\"\n        path=\"research\"\n      />\n      <div className=\"marginTopTitle\">\n        <h1 className=\"titleSeparate\">Research</h1>\n        \n        {/* View mode toggle */}\n        <div style={{ marginBottom: '2rem', textAlign: 'center' }}>\n          <ButtonGroup>\n            <Button\n              appearance={viewMode === 'date' ? 'primary' : 'default'}\n              onClick={() => setViewMode('date')}\n            >\n              By Year\n            </Button>\n            <Button\n              appearance={viewMode === 'tag' ? 'primary' : 'default'}\n              onClick={() => setViewMode('tag')}\n            >\n              By Tag\n            </Button>\n          </ButtonGroup>\n        </div>\n        \n        {/* Render grouped content */}\n        <FlexboxGrid>\n          {researchData.sortedKeys.map(key => (\n            <FlexboxGrid.Item key={key} colspan={24} style={{ marginBottom: '3rem' }}>\n              <h2 style={{ \n                fontSize: '1.5rem', \n                marginBottom: '1.5rem',\n                borderBottom: '2px solid #e0e0e0',\n                paddingBottom: '0.5rem'\n              }}>\n                {researchData.type === 'date' ? key : key}\n              </h2>\n              <FlexboxGrid>\n                {researchData.groups[key].map((edge, index) => (\n                  <FlexboxGrid.Item as={Col} key={index} xs={24} sm={24} md={24} lg={24} style={{ marginBottom: '1rem' }}>\n                    <ResearchCard data={edge} tagsMap={tagsMap} />\n                  </FlexboxGrid.Item>\n                ))}\n              </FlexboxGrid>\n            </FlexboxGrid.Item>\n          ))}\n        </FlexboxGrid>\n      </div>\n    </>\n  );\n};\n\nResearch.propTypes = {\n  data: PropTypes.shape({\n    allMdx: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport const query = graphql`\n  {\n    allTag(\n      sort: { fields: [count], order: DESC },\n      filter: { research: { eq: true } }\n    ) {\n      edges {\n        node {\n          name\n          color\n          path\n        }\n      }\n    }\n    allMdx(\n      filter: { \n        fileAbsolutePath: { regex: \"/research\\/.*\\/index\\\\.mdx?$/\" }\n      }\n      sort: { fields: [frontmatter___priority, frontmatter___title], order: ASC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 320, maxHeight: 180, fit: CONTAIN, background: \"rgba(0,0,0,0)\") {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n            date\n            venue\n            authors\n            path\n            title\n            tags\n            excerpt\n            priority\n            links {\n              name\n              url\n            }\n          }\n          fileAbsolutePath\n        }\n      }\n    }\n  }\n`;\n\nexport default Research;\n"],"names":["ButtonGroup","props","ref","_props$as","as","Component","_props$classPrefix","classPrefix","_props$role","role","className","children","block","vertical","justified","size","rest","_useClassNames","useClassNames","withClassPrefix","classes","merge","contextValue","useMemo","ButtonGroupContext","value","displayName","data","useState","viewMode","setViewMode","displayTags","tags","allTag","edges","tagsMap","tag","node","name","researchData","research","allMdx","groupedByYear","reduce","acc","edge","year","Date","frontmatter","date","getFullYear","push","sortedYears","Object","keys","sort","a","b","parseInt","forEach","type","groups","sortedKeys","groupedByTag","includes","sortedTags","filter","length","title","description","path","style","marginBottom","textAlign","Button","appearance","onClick","FlexboxGrid","map","key","colspan","fontSize","borderBottom","paddingBottom","index","Col","xs","sm","md","lg","ResearchCard"],"sourceRoot":""}